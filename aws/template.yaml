AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template that creates the Memeify S3 input and output buckets and the Memeify Lambda function
Parameters:
  LambdaCodeBucket:
    Type: String
    Description: "name of S3 bucket containing the memeify lambda code"
  LambdaCodeKey:
    Type: String
    Description: "name of the memeify lambda .jar"
    Default: "memeify-lambdas-0.1.jar"
  BucketPrefix:
    Type: String
    Description: "unique prefix to append to the input and output bucket names"

Resources:

  #Create a bucket to store incoming images, with public write access
  ImageInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketPrefix}-input"

  # create a bucket, with public read access, that stores memeified images
  ImageOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketPrefix}-output"

  # allows public GET object permissions on the ImageOutputBucket
  PublicGetObjectPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ImageOutputBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - !Sub "${BucketPrefix}-output"
                  - "/*"
            Principal: "*"

  # allows public PUT object permissions on the ImageInputBucket
  PublicPutObjectPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ImageInputBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:PutObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - !Sub "${BucketPrefix}-input"
                  - "/*"
            Principal: "*"

  MemeifyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.cliff.memeify.Handler::handleRequest
      Runtime: java8
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          INPUT_BUCKET_NAME: !Sub "${BucketPrefix}-input"
          OUTPUT_BUCKET_NAME: !Sub "${BucketPrefix}-output"
          MAX_BODY_SIZE_MB: 10
      CodeUri:
        Bucket: !Ref LambdaCodeBucket
        Key: !Ref LambdaCodeKey
      # Give this lambda access to cloudwatch logs and PutObject/GetObject for our S3 buckets
      Policies: AWSLambdaExecute
      # configure the lambda to be triggered when an object is created in the ImageInputBucket
      Events:
        MemeifyObjectCreatedEvent:
          Type: S3
          Properties:
            Bucket: !Ref ImageInputBucket
            Events: s3:ObjectCreated:*

Outputs:
  LambdaArn:
    Value: !GetAtt MemeifyLambda.Arn
  InputBucketName:
    Value: !Ref ImageInputBucket
  OutputBucketName:
    Value: !Ref ImageOutputBucket

